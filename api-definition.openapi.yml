openapi: 3.0.3
info:
  title: BarManager
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: https://localhost:4010

paths:
  /login/{bar-code}:
    get:
      tags:
        - Login
      summary: login to existing bar
      operationId: login
      parameters:
        - in: path
          name: bar-code
          description: Unique Code to identify the bar
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: bar id, name and owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login-response"
        "404":
          description: Not Found
  /bars/bar:
    post:
      tags:
        - Login
      summary: login
      operationId: postBar
      requestBody:
        description: bar body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bar-creation-request"
      security: []
      responses:
        "200":
          description: bar id and name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bar-creation-response"
        "404":
          description: Not Found
  /bars/{bar-id}/cocktails:
    get:
      tags:
        - Dashboard
        - Cocktails
      summary: get cocktails of specific bar
      operationId: getCocktails
      parameters:
        - in: query
          name: checkAvailability
          schema:
            type: boolean
            default: true
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: bar
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/cocktail"
        "404":
          description: Not Found
  /bars/{bar-id}/orders:
    get:
      tags:
        - Orders
      summary: get orders from a bar
      operationId: getOrders
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: bar
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order"
        "404":
          description: Not Found
  /bars/{bar-id}/orders/{order-id}:
    delete:
      tags:
        - Orders
      summary: delete Order from a bar
      operationId: deleteOrder
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: order-id
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: deletion of order succesful
        "404":
          description: Not Found
  /bars/{bar-id}/orders/order:
    post:
      tags:
        - Dashboard
        - Orders
      summary: Add Order to orders of a bar
      operationId: postOrder
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      requestBody:
        description: order request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/order-creation-request"
      security: []
      responses:
        "201":
          description: bar
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order-creation-response"
        "400":
          description: Bad request
        "404":
          description: Not Found
  /bars/{bar-id}/cocktails/{cocktail-id}:
    get:
      tags:
        - Cocktails
        - Dashboard
      summary: get cocktail and its cocktail from a specific bar
      operationId: getCocktail
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: cocktail-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      responses:
        "200":
          description: bar
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cocktail"
        "404":
          description: Not Found
    put:
      tags:
        - Cocktails
      summary: Update a cocktail in a specific bar
      operationId: putCocktail
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: cocktail-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      requestBody:
        description: cocktail body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cocktail"
      security: []
      responses:
        "200":
          description: bar
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cocktail"
        "404":
          description: Not Found
    delete:
      tags:
        - Cocktails
      summary: Delete a Cocktail from a specific bar
      operationId: deleteCocktail
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: cocktail-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: deletion succesful
        "404":
          description: Not Found
  /bars/{bar-id}/cocktails/cocktail:
    post:
      tags:
        - Cocktails
      summary: Add a cocktail to a specific bar
      operationId: postCocktail
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      requestBody:
        description: cocktail body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cocktail"
      security: []
      responses:
        "201":
          description: cocktail added
        "404":
          description: Not Found

  /bars/{bar-id}/ingredients:
    get:
      tags:
        - Ingredients
      summary: Get all ingredients of a specific bar
      operationId: getIngredients
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: Ingredients retrived
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ingredient"
        "404":
          description: Not Found

  /bars/{bar-id}/ingredients/{ingredient-id}:
    put:
      tags:
        - Ingredients
      summary: Update ingredient of a specific bar
      operationId: putIngredient
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: ingredient-id
          description: Unique id to identify the ingredient
          required: true
          schema:
            type: string
      requestBody:
        description: ingredient body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ingredient"
      security: []
      responses:
        "200":
          description: Ingredient updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ingredient"
        "404":
          description: Not Found
    delete:
      tags:
        - Ingredients
      summary: delete ingredient of a specific bar
      operationId: deleteIngredient
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: ingredient-id
          description: Unique id to identify the ingredient
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: Ingredient deleted
        "404":
          description: Not Found
  /bars/{bar-id}/ingredient-groups/{ingredient-group-id}/ingredient:
    post:
      tags:
        - Ingredients
      summary: add ingrdient to a specific bar
      operationId: postIngredient
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: ingredient-group-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      security: []
      requestBody:
        description: ingredient body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ingredient"
      responses:
        "200":
          description: Ingredients retrived
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ingredient"
        "404":
          description: Not Found
  /bars/{bar-id}/ingredient-groups:
    get:
      tags:
        - IngredientGroups
      summary: Get all ingredient-groups of a specific bar
      operationId: getIngredientGroups
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: IngredientGroups retrived
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ingredientGroup"
        "404":
          description: Not Found
  /bars/{bar-id}/ingredient-groups/{ingredient-group-id}:
    get:
      tags:
        - IngredientGroups
      summary: Get a specific ingredient-group of a specific bar
      operationId: getIngredientGroup
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: ingredient-group-id
          description: Unique id to identify the ingredient
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: Ingredients retrived
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ingredientGroup"
        "404":
          description: Not Found
    put:
      tags:
        - IngredientGroups
      summary: Update ingredient-group of a specific bar
      operationId: putIngredientGroup
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: ingredient-group-id
          description: Unique id to identify the ingredient
          required: true
          schema:
            type: string
      requestBody:
        description: bar body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Gin
                unitOfMeasurement:
                  $ref: "#/components/schemas/unitOfMeasurement"
             
      security: []
      responses:
        "200":
          description: IngredientGroup updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ingredientGroup"
        "404":
          description: Not Found
    delete:
      tags:
        - IngredientGroups
      summary: delete ingredient-group of a specific bar
      operationId: deleteIngredientGroup
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
        - in: path
          name: ingredient-group-id
          description: Unique id to identify the ingredientGroup
          required: true
          schema:
            type: string
      security: []
      responses:
        "200":
          description: IngredientGroup deleted
        "404":
          description: Not Found
  /bars/{bar-id}/ingredient-groups/ingredient-group:
    post:
      tags:
        - IngredientGroups
      summary: add ingredient-group to a specific bar
      operationId: postIngredientGroup
      parameters:
        - in: path
          name: bar-id
          description: Unique id to identify bar
          required: true
          schema:
            type: string
      requestBody:
        description: ingredient-group body
        required: true
        content:
          application/json:
           $ref: "#/components/schemas/ingredientGroup"
      security: []
      responses:
        "201":
          description: IngredientGroup added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ingredientGroup"
        "404":
          description: Not Found
components:
  schemas:
    ingredientGroup:
      type: object
      required:
        - ingredientGroupId
        - ingredientName
        - unitOfMeasurement
      properties:
        ingredientGroupId:
          type: string
          example: 1
        ingredientGroupName:
          type: string
          example: Gin
        unitOfMeasurement:
          $ref: "#/components/schemas/unitOfMeasurement"
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/ingredient"
    cocktail:
      type: object
      required:
        - cocktailId
        - cocktailName
        - ingredientGroup
      properties:
        cocktailId:
          type: string
          example: 1
        cocktailName:
          type: string
          example: Gin Tonic
        recipeIngredients:
          type: array
          items:
            $ref: "#/components/schemas/recipeIngredient"
    recipeIngredient:
      type: object
      required:
        - unitOfMeasurement
        - amount
        - ingredientGroupName
      properties:
        unitOfMeasurement:
          $ref: "#/components/schemas/unitOfMeasurement"
        ingredientGroupName:
          type: string
          example: Gin
        amount:
          type: number
          example: 500
    ingredient:
      type: object
      required:
        - ingredientId
        - ingredientName
        - amount
      properties:
        ingredientId:
          type: string         
          example: 1
        ingredientName:
          type: string
          example: Gin de Cologne
        amount:
          type: integer
          format: int64
          example: 500
        description:
          type: string
          example: use for shots
    unitOfMeasurement:
      type: string
      example: ml
      enum:
        - ML
        - G
        - PIECE
    order:
      type: object
      required:
        - orderId
        - cocktailId
        - cocktailName
        - customerName
        - timestamp
      properties:
        orderId:
          type: string
          example: 1
        cocktailId:
          type: string
          example: 1
        cocktailName:
          type: string
          example: Mojito
        customerName:
          type: string
          example: Tom Awesome
        timestamp:
          type: string

    bar-creation-request:
      type: object
      required:
        - barName
        - ownerName
      properties:
        barName:
          type: string
          example: Bar Name
          minLength: 1
          maxLength: 20
        ownerName:
          type: string
          example: Tom
          minLength: 1
          maxLength: 20
    bar-creation-response:
      type: object
      required:
        - barName
        - ownerName
        - barId
        - barCode
      properties:
        barId:
          type: string
          example: 1
          min: 1
        barCode:
          type: string
          example: 1233da
          minLength: 6
          maxLength: 6
        barName:
          type: string
          example: Bar Name
          minLength: 1
          maxLength: 20
        ownerName:
          type: string
          example: Tom
          minLength: 1
          maxLength: 20
    login-request:
      type: object
      required:
        - barCode
      properties:
        barCode:
          type: string
          example: 123abc
          minLength: 6
          maxLength: 6
    login-response:
      type: object
      required:
        - barId
        - barName
        - ownerName
        - barCode
      properties:
        barId:
          type: string
          example: 1
          min: 1
        barName:
          type: string
          example: Bar Name
          minLength: 1
          maxLength: 20
        barCode:
          type: string
          example: d2ad12
          minLength: 6
          maxLength: 6
        ownerName:
          type: string
          example: Tom
          minLength: 1
          maxLength: 20
    order-creation-request:
      type: object
      required:
        - cocktailId
        - customerName
      properties:
        cocktailId:
          type: string          
          example: 1
        customerName:
          type: string
          example: Tom Awesome
    order-creation-response:
      type: object
      required:
        - cocktailId
        - customerName
        - orderId
      properties:
        cocktailId:
          type: string        
          example: 1
        customerName:
          type: string
          example: Tom Awesome
        orderId:
          type: string
          format: int64
          example: 1
